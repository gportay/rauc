From: Enrico Jorns <ejo@pengutronix.de>
Date: Fri, 12 Oct 2018 16:29:13 +0200
Subject: [PATCH] test/manifest.c: fix freeing of GBytes

Neesd to be freed with g_bytes_unref(), not g_byte_array_free and
results in compiler errors:

| test/manifest.c: In function 'test_invalid_data':
| /usr/include/glib-2.0/glib/gmem.h:121:18: error: passing argument 1 of 'g_byte_array_free' from incompatible pointer type [-Werror=incompatible-pointer-types]
|        (destroy) (_ptr); \
|                   ^~~~

Signed-off-by: Enrico Jorns <ejo@pengutronix.de>
Origin: upstream, https://github.com/rauc/rauc/commit/870f0fbca73b51ab913a41bfa48a2b74d6f5dbce
---
 test/manifest.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/test/manifest.c b/test/manifest.c
index b5abe61..028a0a8 100644
--- a/test/manifest.c
+++ b/test/manifest.c
@@ -353,35 +353,35 @@ compatible=SuperBazzer\n\
 	g_assert_cmpstr("Key file does not start with a group", ==, error->message);
 	g_clear_error(&error);
 	g_assert_null(rm);
-	g_clear_pointer(&data, g_byte_array_free);
+	g_clear_pointer(&data, g_bytes_unref);
 
 	data = g_bytes_new_static(MANIFEST2, sizeof(MANIFEST2));
 	g_assert_false(load_manifest_mem(data, &rm, &error));
 	g_assert_error(error, G_KEY_FILE_ERROR, G_KEY_FILE_ERROR_KEY_NOT_FOUND);
 	g_clear_error(&error);
 	g_assert_null(rm);
-	g_clear_pointer(&data, g_byte_array_free);
+	g_clear_pointer(&data, g_bytes_unref);
 
 	data = g_bytes_new_static(MANIFEST3, sizeof(MANIFEST3));
 	g_assert_false(load_manifest_mem(data, &rm, &error));
 	g_assert_error(error, G_KEY_FILE_ERROR, G_KEY_FILE_ERROR_PARSE);
 	g_clear_error(&error);
 	g_assert_null(rm);
-	g_clear_pointer(&data, g_byte_array_free);
+	g_clear_pointer(&data, g_bytes_unref);
 
 	data = g_bytes_new_static(MANIFEST4, sizeof(MANIFEST4));
 	g_assert_false(load_manifest_mem(data, &rm, &error));
 	g_assert_error(error, G_KEY_FILE_ERROR, G_KEY_FILE_ERROR_PARSE);
 	g_clear_error(&error);
 	g_assert_null(rm);
-	g_clear_pointer(&data, g_byte_array_free);
+	g_clear_pointer(&data, g_bytes_unref);
 
 	data = g_bytes_new_static(MANIFEST5, sizeof(MANIFEST5));
 	g_assert_false(load_manifest_mem(data, &rm, &error));
 	g_assert_error(error, G_KEY_FILE_ERROR, G_KEY_FILE_ERROR_PARSE);
 	g_clear_error(&error);
 	g_assert_null(rm);
-	g_clear_pointer(&data, g_byte_array_free);
+	g_clear_pointer(&data, g_bytes_unref);
 }
 
 static void manifest_test_verify(ManifestFixture *fixture,
-- 
2.19.2

